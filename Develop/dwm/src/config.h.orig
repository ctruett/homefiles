#include <X11/XF86keysym.h> 
/* See LICENSE file for copyright and license details. */

/* appearance */
static const char font[]            = "-*-termsyn.icons-medium-r-*--14-*-*-*-*-*-*-*";
static const char normbordercolor[] = "#000000";
static const char normbgcolor[]     = "#000000";
static const char normfgcolor[]     = "#888888";
static const char selbordercolor[]  = "#1e1e1e";
static const char selbgcolor[]      = "#000000";
static const char selfgcolor[]      = "#ffffff";
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const Bool showbar           = True;     /* False means no bar */
static const Bool topbar            = True;     /* False means bottom bar */

/* tagging */
static const char *tags[] = { "×", "´", "Î", "ê", "º" };

static const Rule rules[] = {
  /* class      instance    title       tags mask     isfloating   monitor */
  { NULL      , NULL , NULL        , 0    , True  , -1 } , 
  { "Firefox" , NULL , NULL        , 1<<1 , True  , -1 } , 
  { "URxvt"   , NULL , NULL        , 0    , False , -1 } , 
  { "URxvt"   , NULL , "pyradio"   , 1<<3 , False , -1 } , 
  { "URxvt"   , NULL , "alsamixer" , 1<<3 , False , -1 } , 
  { "URxvt"   , NULL , "weechat"   , 1<<4 , False , -1 } , 
  { "Vlc"     , NULL , NULL        , 1<<2 , False , -1 } , 
  { "Gbfed"   , NULL , NULL        , 0    , False , -1 } , 
};

/* layout(s) */
static const float mfact      = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster      = 1;    /* number of clients in master area */
static const Bool resizehints = False; /* True means respect size hints in tiled resizals */

static const Layout layouts[] = {
  /* symbol     arrange function */
  { "þ",      tile },    /* first entry is default */
  { "ý",      NULL },    /* no layout function means floating behavior */
  { "ÿ",      monocle },
};

/* key definitions */
#define MODKEY Mod1Mask
#define TAGKEYS(KEY,TAG) \
{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static const char *dmenucmd[]   = { "dmenu_run", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[]    = { "urxvt", NULL };
// static const char *radio[]      = { "urxvt", "-e", "pyradio", NULL };
// static const char *mixer[]      = { "urxvt", "-e", "alsamixer", NULL };
static const char *volumedown[] = { "amixer", "-q", "set", "PCM", "2%-", "unmute", NULL };
static const char *volumeup[]   = { "amixer", "-q", "set", "PCM", "2%+", "unmute", NULL };
static const char *mute[]       = { "amixer", "-q", "set", "PCM", "toggle", NULL };
static const char *vlc[]        = { "vlc-play", NULL };
static const char *rotatewall[] = { "wallpaper-rotate-new", NULL };

static Key keys[] = {
  /* modifier                     key        function        argument */
  { 0, XF86XK_AudioLowerVolume,   spawn,        { .v = volumedown } },
  { 0, XF86XK_AudioRaiseVolume,   spawn,        { .v = volumeup } }, 
  { 0, XF86XK_AudioMute,          spawn,        { .v = mute } }, 
  { MODKEY|ShiftMask,             XK_bracketright, spawn,    {.v = rotatewall } },
  { MODKEY,                       XK_v,      spawn,          {.v = vlc } },
  { MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
  // { MODKEY,                       XK_r,      spawn,          {.v = radio } },
  // { MODKEY|ShiftMask,             XK_m,      spawn,          {.v = mixer } },
  { MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
  { MODKEY,                       XK_b,      togglebar,      {0} },
  { MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
  { MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
  { MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
  { MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
  { MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
  { MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
  { MODKEY,                       XK_m,      zoom,           {0} },
  { MODKEY,                       XK_Tab,    view,           {0} },
  { MODKEY,                       XK_q,      killclient,     {0} },
  { MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
  { MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
  { MODKEY,                       XK_Return, setlayout,      {.v = &layouts[2]} },
  { MODKEY,                       XK_space,  setlayout,      {0} },
  { MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
  { MODKEY,                       XK_0,      view,           {.ui = ~0 } },
  { MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
  { MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
  { MODKEY,                       XK_period, focusmon,       {.i = +1 } },
  { MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
  { MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
  TAGKEYS(                        XK_1,                      0)
  TAGKEYS(                        XK_2,                      1)
  TAGKEYS(                        XK_3,                      2)
  TAGKEYS(                        XK_4,                      3)
  TAGKEYS(                        XK_5,                      4)
  TAGKEYS(                        XK_6,                      5)
  TAGKEYS(                        XK_7,                      6)
  TAGKEYS(                        XK_8,                      7)
  TAGKEYS(                        XK_9,                      8)
  { MODKEY|ShiftMask,             XK_q,      quit,           {0} },
};


/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
  /* click                event mask      button          function        argument */
  { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
  { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
  { ClkWinTitle,          0,              Button2,        zoom,           {0} },
  { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
  { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
  { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
  { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
  { ClkTagBar,            0,              Button1,        view,           {0} },
  { ClkTagBar,            0,              Button3,        toggleview,     {0} },
  { ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
  { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

